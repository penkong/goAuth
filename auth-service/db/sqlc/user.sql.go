// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCredFirst = `-- name: CreateCredFirst :one
INSERT INTO creds (hashed_pass) VALUES ($1) RETURNING id, hashed_pass, deleted, created_at, updated_at, deleted_at, rv
`

func (q *Queries) CreateCredFirst(ctx context.Context, hashedPass string) (Cred, error) {
	row := q.queryRow(ctx, q.createCredFirstStmt, createCredFirst, hashedPass)
	var i Cred
	err := row.Scan(
		&i.ID,
		&i.HashedPass,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Rv,
	)
	return i, err
}

const createUserBaseInfo = `-- name: CreateUserBaseInfo :one
INSERT INTO
  users_info (first_name, last_name, dob, rv)
VALUES
  ($1, $2, $3, $4) RETURNING id, first_name, last_name, dob, company_id, org_position, team_id, cell_phone, home_phone, work_phone, avatar, work_address, home_address, current_city, current_country, zip_code, national_number, national_card_pic, passport_number_type, passport_pic, deleted, created_at, updated_at, deleted_at, rv
`

type CreateUserBaseInfoParams struct {
	FirstName string        `db:"first_name" json:"first_name"`
	LastName  string        `db:"last_name" json:"last_name"`
	Dob       time.Time     `db:"dob" json:"dob"`
	Rv        sql.NullInt32 `db:"rv" json:"rv"`
}

func (q *Queries) CreateUserBaseInfo(ctx context.Context, arg CreateUserBaseInfoParams) (UsersInfo, error) {
	row := q.queryRow(ctx, q.createUserBaseInfoStmt, createUserBaseInfo,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Rv,
	)
	var i UsersInfo
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.CompanyID,
		&i.OrgPosition,
		&i.TeamID,
		&i.CellPhone,
		&i.HomePhone,
		&i.WorkPhone,
		&i.Avatar,
		&i.WorkAddress,
		&i.HomeAddress,
		&i.CurrentCity,
		&i.CurrentCountry,
		&i.ZipCode,
		&i.NationalNumber,
		&i.NationalCardPic,
		&i.PassportNumberType,
		&i.PassportPic,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Rv,
	)
	return i, err
}
