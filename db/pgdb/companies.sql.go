// Code generated by sqlc. DO NOT EDIT.
// source: companies.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCompanyBasic = `-- name: CreateCompanyBasic :one
INSERT INTO 
  companies(company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, rv)
VALUES 
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING company_id, company
`

type CreateCompanyBasicParams struct {
	Company    string         `db:"company" json:"company"`
	Bio        string         `db:"bio" json:"bio"`
	Country    string         `db:"country" json:"country"`
	Region     string         `db:"region" json:"region"`
	Ceo        sql.NullString `db:"ceo" json:"ceo"`
	Manager    sql.NullString `db:"manager" json:"manager"`
	Hr         sql.NullString `db:"hr" json:"hr"`
	Address    string         `db:"address" json:"address"`
	HowClean   int32          `db:"how_clean" json:"how_clean"`
	IndustryID int64          `db:"industry_id" json:"industry_id"`
	Rv         sql.NullInt32  `db:"rv" json:"rv"`
}

type CreateCompanyBasicRow struct {
	CompanyID int32  `db:"company_id" json:"company_id"`
	Company   string `db:"company" json:"company"`
}

func (q *Queries) CreateCompanyBasic(ctx context.Context, arg CreateCompanyBasicParams) (CreateCompanyBasicRow, error) {
	row := q.queryRow(ctx, q.createCompanyBasicStmt, createCompanyBasic,
		arg.Company,
		arg.Bio,
		arg.Country,
		arg.Region,
		arg.Ceo,
		arg.Manager,
		arg.Hr,
		arg.Address,
		arg.HowClean,
		arg.IndustryID,
		arg.Rv,
	)
	var i CreateCompanyBasicRow
	err := row.Scan(&i.CompanyID, &i.Company)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
UPDATE
  companies
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  company_id = $1 AND deleted = false
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID int32) error {
	_, err := q.exec(ctx, q.deleteCompanyStmt, deleteCompany, companyID)
	return err
}

const getCompanies = `-- name: GetCompanies :many
SELECT 
  company_id, company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, bank_account_all_id, created_at, updated_at
FROM 
  companies
WHERE 
  deleted = false
LIMIT $1
OFFSET $2
`

type GetCompaniesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetCompaniesRow struct {
	CompanyID        int32          `db:"company_id" json:"company_id"`
	Company          string         `db:"company" json:"company"`
	Bio              string         `db:"bio" json:"bio"`
	Country          string         `db:"country" json:"country"`
	Region           string         `db:"region" json:"region"`
	Ceo              sql.NullString `db:"ceo" json:"ceo"`
	Manager          sql.NullString `db:"manager" json:"manager"`
	Hr               sql.NullString `db:"hr" json:"hr"`
	Address          string         `db:"address" json:"address"`
	HowClean         int32          `db:"how_clean" json:"how_clean"`
	IndustryID       int64          `db:"industry_id" json:"industry_id"`
	BankAccountAllID uuid.UUID      `db:"bank_account_all_id" json:"bank_account_all_id"`
	CreatedAt        time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt        sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetCompanies(ctx context.Context, arg GetCompaniesParams) ([]GetCompaniesRow, error) {
	rows, err := q.query(ctx, q.getCompaniesStmt, getCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompaniesRow
	for rows.Next() {
		var i GetCompaniesRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.Company,
			&i.Bio,
			&i.Country,
			&i.Region,
			&i.Ceo,
			&i.Manager,
			&i.Hr,
			&i.Address,
			&i.HowClean,
			&i.IndustryID,
			&i.BankAccountAllID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyById = `-- name: GetCompanyById :one
SELECT 
  company_id, company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, bank_account_all_id, created_at, updated_at
FROM 
  companies
WHERE 
  company_id = $1 AND deleted = false
`

type GetCompanyByIdRow struct {
	CompanyID        int32          `db:"company_id" json:"company_id"`
	Company          string         `db:"company" json:"company"`
	Bio              string         `db:"bio" json:"bio"`
	Country          string         `db:"country" json:"country"`
	Region           string         `db:"region" json:"region"`
	Ceo              sql.NullString `db:"ceo" json:"ceo"`
	Manager          sql.NullString `db:"manager" json:"manager"`
	Hr               sql.NullString `db:"hr" json:"hr"`
	Address          string         `db:"address" json:"address"`
	HowClean         int32          `db:"how_clean" json:"how_clean"`
	IndustryID       int64          `db:"industry_id" json:"industry_id"`
	BankAccountAllID uuid.UUID      `db:"bank_account_all_id" json:"bank_account_all_id"`
	CreatedAt        time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt        sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetCompanyById(ctx context.Context, companyID int32) (GetCompanyByIdRow, error) {
	row := q.queryRow(ctx, q.getCompanyByIdStmt, getCompanyById, companyID)
	var i GetCompanyByIdRow
	err := row.Scan(
		&i.CompanyID,
		&i.Company,
		&i.Bio,
		&i.Country,
		&i.Region,
		&i.Ceo,
		&i.Manager,
		&i.Hr,
		&i.Address,
		&i.HowClean,
		&i.IndustryID,
		&i.BankAccountAllID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT 
  company_id, company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, bank_account_all_id, created_at, updated_at
FROM 
  companies
WHERE 
  company = $1 AND deleted = false
`

type GetCompanyByNameRow struct {
	CompanyID        int32          `db:"company_id" json:"company_id"`
	Company          string         `db:"company" json:"company"`
	Bio              string         `db:"bio" json:"bio"`
	Country          string         `db:"country" json:"country"`
	Region           string         `db:"region" json:"region"`
	Ceo              sql.NullString `db:"ceo" json:"ceo"`
	Manager          sql.NullString `db:"manager" json:"manager"`
	Hr               sql.NullString `db:"hr" json:"hr"`
	Address          string         `db:"address" json:"address"`
	HowClean         int32          `db:"how_clean" json:"how_clean"`
	IndustryID       int64          `db:"industry_id" json:"industry_id"`
	BankAccountAllID uuid.UUID      `db:"bank_account_all_id" json:"bank_account_all_id"`
	CreatedAt        time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt        sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetCompanyByName(ctx context.Context, company string) (GetCompanyByNameRow, error) {
	row := q.queryRow(ctx, q.getCompanyByNameStmt, getCompanyByName, company)
	var i GetCompanyByNameRow
	err := row.Scan(
		&i.CompanyID,
		&i.Company,
		&i.Bio,
		&i.Country,
		&i.Region,
		&i.Ceo,
		&i.Manager,
		&i.Hr,
		&i.Address,
		&i.HowClean,
		&i.IndustryID,
		&i.BankAccountAllID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompanyBankAccount = `-- name: UpdateCompanyBankAccount :one
UPDATE
  companies
SET 
  (bank_account_all_id, updated_at, rv) 
  = ($2, now(), $3)
WHERE
  company_id = $1 AND deleted = false RETURNING company_id, company, updated_at
`

type UpdateCompanyBankAccountParams struct {
	CompanyID        int32         `db:"company_id" json:"company_id"`
	BankAccountAllID uuid.UUID     `db:"bank_account_all_id" json:"bank_account_all_id"`
	Rv               sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateCompanyBankAccountRow struct {
	CompanyID int32        `db:"company_id" json:"company_id"`
	Company   string       `db:"company" json:"company"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateCompanyBankAccount(ctx context.Context, arg UpdateCompanyBankAccountParams) (UpdateCompanyBankAccountRow, error) {
	row := q.queryRow(ctx, q.updateCompanyBankAccountStmt, updateCompanyBankAccount, arg.CompanyID, arg.BankAccountAllID, arg.Rv)
	var i UpdateCompanyBankAccountRow
	err := row.Scan(&i.CompanyID, &i.Company, &i.UpdatedAt)
	return i, err
}

const updateCompanyById = `-- name: UpdateCompanyById :one
UPDATE
  companies
SET 
  (company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, updated_at, rv) 
  = ($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, now(), $12)
WHERE
  company_id = $1 AND deleted = false RETURNING company_id, company, industry_id, updated_at
`

type UpdateCompanyByIdParams struct {
	CompanyID  int32          `db:"company_id" json:"company_id"`
	Company    string         `db:"company" json:"company"`
	Bio        string         `db:"bio" json:"bio"`
	Country    string         `db:"country" json:"country"`
	Region     string         `db:"region" json:"region"`
	Ceo        sql.NullString `db:"ceo" json:"ceo"`
	Manager    sql.NullString `db:"manager" json:"manager"`
	Hr         sql.NullString `db:"hr" json:"hr"`
	Address    string         `db:"address" json:"address"`
	HowClean   int32          `db:"how_clean" json:"how_clean"`
	IndustryID int64          `db:"industry_id" json:"industry_id"`
	Rv         sql.NullInt32  `db:"rv" json:"rv"`
}

type UpdateCompanyByIdRow struct {
	CompanyID  int32        `db:"company_id" json:"company_id"`
	Company    string       `db:"company" json:"company"`
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateCompanyById(ctx context.Context, arg UpdateCompanyByIdParams) (UpdateCompanyByIdRow, error) {
	row := q.queryRow(ctx, q.updateCompanyByIdStmt, updateCompanyById,
		arg.CompanyID,
		arg.Company,
		arg.Bio,
		arg.Country,
		arg.Region,
		arg.Ceo,
		arg.Manager,
		arg.Hr,
		arg.Address,
		arg.HowClean,
		arg.IndustryID,
		arg.Rv,
	)
	var i UpdateCompanyByIdRow
	err := row.Scan(
		&i.CompanyID,
		&i.Company,
		&i.IndustryID,
		&i.UpdatedAt,
	)
	return i, err
}
