// Code generated by sqlc. DO NOT EDIT.
// source: industries.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"
)

const createIndustryBasic = `-- name: CreateIndustryBasic :one
INSERT INTO 
  industries(industry, how_clean, rv)
VALUES 
  ($1, $2, $3) RETURNING industry_id, industry, how_clean, created_at
`

type CreateIndustryBasicParams struct {
	Industry string `db:"industry" json:"industry"`
	HowClean int32  `db:"how_clean" json:"how_clean"`
	Rv       int32  `db:"rv" json:"rv"`
}

type CreateIndustryBasicRow struct {
	IndustryID int64     `db:"industry_id" json:"industry_id"`
	Industry   string    `db:"industry" json:"industry"`
	HowClean   int32     `db:"how_clean" json:"how_clean"`
	CreatedAt  time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateIndustryBasic(ctx context.Context, arg CreateIndustryBasicParams) (CreateIndustryBasicRow, error) {
	row := q.queryRow(ctx, q.createIndustryBasicStmt, createIndustryBasic, arg.Industry, arg.HowClean, arg.Rv)
	var i CreateIndustryBasicRow
	err := row.Scan(
		&i.IndustryID,
		&i.Industry,
		&i.HowClean,
		&i.CreatedAt,
	)
	return i, err
}

const deleteIndustry = `-- name: DeleteIndustry :one
UPDATE
  industries 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  industry_id = $1 RETURNING industry_id, deleted_at, deleted
`

type DeleteIndustryRow struct {
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	DeletedAt  sql.NullTime `db:"deleted_at" json:"deleted_at"`
	Deleted    sql.NullBool `db:"deleted" json:"deleted"`
}

func (q *Queries) DeleteIndustry(ctx context.Context, industryID int64) (DeleteIndustryRow, error) {
	row := q.queryRow(ctx, q.deleteIndustryStmt, deleteIndustry, industryID)
	var i DeleteIndustryRow
	err := row.Scan(&i.IndustryID, &i.DeletedAt, &i.Deleted)
	return i, err
}

const getIndustries = `-- name: GetIndustries :many
SELECT 
  industry_id, industry, how_clean, created_at, updated_at 
FROM 
  industries 
WHERE 
  deleted = false
LIMIT $1 OFFSET $2
`

type GetIndustriesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetIndustriesRow struct {
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	Industry   string       `db:"industry" json:"industry"`
	HowClean   int32        `db:"how_clean" json:"how_clean"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetIndustries(ctx context.Context, arg GetIndustriesParams) ([]GetIndustriesRow, error) {
	rows, err := q.query(ctx, q.getIndustriesStmt, getIndustries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIndustriesRow
	for rows.Next() {
		var i GetIndustriesRow
		if err := rows.Scan(
			&i.IndustryID,
			&i.Industry,
			&i.HowClean,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustryById = `-- name: GetIndustryById :one
SELECT 
  industry_id, industry, how_clean, created_at, updated_at 
FROM 
  industries 
WHERE 
  industry_id = $1 AND deleted = false
`

type GetIndustryByIdRow struct {
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	Industry   string       `db:"industry" json:"industry"`
	HowClean   int32        `db:"how_clean" json:"how_clean"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetIndustryById(ctx context.Context, industryID int64) (GetIndustryByIdRow, error) {
	row := q.queryRow(ctx, q.getIndustryByIdStmt, getIndustryById, industryID)
	var i GetIndustryByIdRow
	err := row.Scan(
		&i.IndustryID,
		&i.Industry,
		&i.HowClean,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIndustryByName = `-- name: GetIndustryByName :one
SELECT 
  industry_id, industry, how_clean, created_at, updated_at 
FROM 
  industries 
WHERE 
  industry = $1 AND deleted = false
`

type GetIndustryByNameRow struct {
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	Industry   string       `db:"industry" json:"industry"`
	HowClean   int32        `db:"how_clean" json:"how_clean"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetIndustryByName(ctx context.Context, industry string) (GetIndustryByNameRow, error) {
	row := q.queryRow(ctx, q.getIndustryByNameStmt, getIndustryByName, industry)
	var i GetIndustryByNameRow
	err := row.Scan(
		&i.IndustryID,
		&i.Industry,
		&i.HowClean,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIndustryById = `-- name: UpdateIndustryById :one
UPDATE
  industries
SET
  (industry, how_clean, updated_at) = ($2, $3, now())
WHERE 
  industry_id = $1 AND deleted = false RETURNING industry_id, industry, how_clean, updated_at
`

type UpdateIndustryByIdParams struct {
	IndustryID int64  `db:"industry_id" json:"industry_id"`
	Industry   string `db:"industry" json:"industry"`
	HowClean   int32  `db:"how_clean" json:"how_clean"`
}

type UpdateIndustryByIdRow struct {
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	Industry   string       `db:"industry" json:"industry"`
	HowClean   int32        `db:"how_clean" json:"how_clean"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateIndustryById(ctx context.Context, arg UpdateIndustryByIdParams) (UpdateIndustryByIdRow, error) {
	row := q.queryRow(ctx, q.updateIndustryByIdStmt, updateIndustryById, arg.IndustryID, arg.Industry, arg.HowClean)
	var i UpdateIndustryByIdRow
	err := row.Scan(
		&i.IndustryID,
		&i.Industry,
		&i.HowClean,
		&i.UpdatedAt,
	)
	return i, err
}
