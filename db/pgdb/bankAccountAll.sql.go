// Code generated by sqlc. DO NOT EDIT.
// source: bankAccountAll.sql

package pgdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBankAccountAllBasic = `-- name: CreateBankAccountAllBasic :exec
INSERT INTO 
  bank_account_all(account_1, rv)
VALUES 
  ($1, $2)
`

type CreateBankAccountAllBasicParams struct {
	Account1 sql.NullInt64 `db:"account_1" json:"account_1"`
	Rv       sql.NullInt32 `db:"rv" json:"rv"`
}

func (q *Queries) CreateBankAccountAllBasic(ctx context.Context, arg CreateBankAccountAllBasicParams) error {
	_, err := q.exec(ctx, q.createBankAccountAllBasicStmt, createBankAccountAllBasic, arg.Account1, arg.Rv)
	return err
}

const deleteBankAccountAll = `-- name: DeleteBankAccountAll :exec
UPDATE
  bank_account_all
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  bank_account_all_id = $1 AND deleted = false
`

func (q *Queries) DeleteBankAccountAll(ctx context.Context, bankAccountAllID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteBankAccountAllStmt, deleteBankAccountAll, bankAccountAllID)
	return err
}

const getBanAccountAllById = `-- name: GetBanAccountAllById :one
SELECT 
  bank_account_all_id, account_1, account_2, account_3, account_4, account_5
FROM 
  bank_account_all
WHERE 
  bank_account_all_id = $1 AND deleted = false
`

type GetBanAccountAllByIdRow struct {
	BankAccountAllID uuid.UUID     `db:"bank_account_all_id" json:"bank_account_all_id"`
	Account1         sql.NullInt64 `db:"account_1" json:"account_1"`
	Account2         sql.NullInt64 `db:"account_2" json:"account_2"`
	Account3         sql.NullInt64 `db:"account_3" json:"account_3"`
	Account4         sql.NullInt64 `db:"account_4" json:"account_4"`
	Account5         sql.NullInt64 `db:"account_5" json:"account_5"`
}

func (q *Queries) GetBanAccountAllById(ctx context.Context, bankAccountAllID uuid.UUID) (GetBanAccountAllByIdRow, error) {
	row := q.queryRow(ctx, q.getBanAccountAllByIdStmt, getBanAccountAllById, bankAccountAllID)
	var i GetBanAccountAllByIdRow
	err := row.Scan(
		&i.BankAccountAllID,
		&i.Account1,
		&i.Account2,
		&i.Account3,
		&i.Account4,
		&i.Account5,
	)
	return i, err
}

const updateBankAccountAll = `-- name: UpdateBankAccountAll :exec
UPDATE
  bank_account_all
SET 
  (account_1, account_2, account_3, account_4, account_5, updated_at, rv) 
  = ($2, $3, $4, $5, $6, now(), $7)
WHERE
  bank_account_all_id = $1 AND deleted = false
`

type UpdateBankAccountAllParams struct {
	BankAccountAllID uuid.UUID     `db:"bank_account_all_id" json:"bank_account_all_id"`
	Account1         sql.NullInt64 `db:"account_1" json:"account_1"`
	Account2         sql.NullInt64 `db:"account_2" json:"account_2"`
	Account3         sql.NullInt64 `db:"account_3" json:"account_3"`
	Account4         sql.NullInt64 `db:"account_4" json:"account_4"`
	Account5         sql.NullInt64 `db:"account_5" json:"account_5"`
	Rv               sql.NullInt32 `db:"rv" json:"rv"`
}

func (q *Queries) UpdateBankAccountAll(ctx context.Context, arg UpdateBankAccountAllParams) error {
	_, err := q.exec(ctx, q.updateBankAccountAllStmt, updateBankAccountAll,
		arg.BankAccountAllID,
		arg.Account1,
		arg.Account2,
		arg.Account3,
		arg.Account4,
		arg.Account5,
		arg.Rv,
	)
	return err
}
