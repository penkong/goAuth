// Code generated by sqlc. DO NOT EDIT.
// source: usersRolesAppsCompanies.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUserRoleAppCompany = `-- name: CreateUserRoleAppCompany :exec
INSERT INTO 
  users_roles_apps_companies(user_id, role_id, app_id, company_id, rv)
VALUES 
  ($1, $2, $3, $4, $5)
`

type CreateUserRoleAppCompanyParams struct {
	UserID    uuid.UUID `db:"user_id" json:"user_id"`
	RoleID    int64     `db:"role_id" json:"role_id"`
	AppID     int64     `db:"app_id" json:"app_id"`
	CompanyID int64     `db:"company_id" json:"company_id"`
	Rv        int32     `db:"rv" json:"rv"`
}

func (q *Queries) CreateUserRoleAppCompany(ctx context.Context, arg CreateUserRoleAppCompanyParams) error {
	_, err := q.exec(ctx, q.createUserRoleAppCompanyStmt, createUserRoleAppCompany,
		arg.UserID,
		arg.RoleID,
		arg.AppID,
		arg.CompanyID,
		arg.Rv,
	)
	return err
}

const getUserRoleAppCompanyByUserAppId = `-- name: GetUserRoleAppCompanyByUserAppId :one
SELECT 
  user_id, role_id, app_id, company_id, created_at, updated_at
FROM
  users_roles_apps_companies
WHERE
  user_id = $1 AND app_id = $2 AND deleted = false
`

type GetUserRoleAppCompanyByUserAppIdParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	AppID  int64     `db:"app_id" json:"app_id"`
}

type GetUserRoleAppCompanyByUserAppIdRow struct {
	UserID    uuid.UUID    `db:"user_id" json:"user_id"`
	RoleID    int64        `db:"role_id" json:"role_id"`
	AppID     int64        `db:"app_id" json:"app_id"`
	CompanyID int64        `db:"company_id" json:"company_id"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserRoleAppCompanyByUserAppId(ctx context.Context, arg GetUserRoleAppCompanyByUserAppIdParams) (GetUserRoleAppCompanyByUserAppIdRow, error) {
	row := q.queryRow(ctx, q.getUserRoleAppCompanyByUserAppIdStmt, getUserRoleAppCompanyByUserAppId, arg.UserID, arg.AppID)
	var i GetUserRoleAppCompanyByUserAppIdRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.AppID,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
