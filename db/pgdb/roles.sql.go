// Code generated by sqlc. DO NOT EDIT.
// source: roles.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"
)

const createRoleBasic = `-- name: CreateRoleBasic :one
INSERT INTO 
  roles(role, rv)
VALUES 
  ($1, $2) RETURNING role_id, role
`

type CreateRoleBasicParams struct {
	Role string `db:"role" json:"role"`
	Rv   int32  `db:"rv" json:"rv"`
}

type CreateRoleBasicRow struct {
	RoleID int64  `db:"role_id" json:"role_id"`
	Role   string `db:"role" json:"role"`
}

func (q *Queries) CreateRoleBasic(ctx context.Context, arg CreateRoleBasicParams) (CreateRoleBasicRow, error) {
	row := q.queryRow(ctx, q.createRoleBasicStmt, createRoleBasic, arg.Role, arg.Rv)
	var i CreateRoleBasicRow
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
UPDATE
  roles 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int64) error {
	_, err := q.exec(ctx, q.deleteRoleStmt, deleteRole, roleID)
	return err
}

const getRoleById = `-- name: GetRoleById :one
SELECT 
  role_id, role, created_at, updated_at
FROM 
  roles
WHERE 
  role_id = $1 AND deleted = false
`

type GetRoleByIdRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetRoleById(ctx context.Context, roleID int64) (GetRoleByIdRow, error) {
	row := q.queryRow(ctx, q.getRoleByIdStmt, getRoleById, roleID)
	var i GetRoleByIdRow
	err := row.Scan(
		&i.RoleID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT 
  role_id, role, created_at, updated_at
FROM 
  roles
WHERE 
  role = $1 AND deleted = false
`

type GetRoleByNameRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetRoleByName(ctx context.Context, role string) (GetRoleByNameRow, error) {
	row := q.queryRow(ctx, q.getRoleByNameStmt, getRoleByName, role)
	var i GetRoleByNameRow
	err := row.Scan(
		&i.RoleID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT 
  role_id, role, created_at, updated_at
FROM 
  roles
WHERE 
  deleted = false
`

type GetRolesRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetRoles(ctx context.Context) ([]GetRolesRow, error) {
	rows, err := q.query(ctx, q.getRolesStmt, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesRow
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(
			&i.RoleID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleById = `-- name: UpdateRoleById :one
UPDATE
  roles 
SET 
  (role, updated_at, rv) = ($2, now(), $3)
WHERE
  role_id = $1 AND deleted = false RETURNING role_id, role, updated_at
`

type UpdateRoleByIdParams struct {
	RoleID int64  `db:"role_id" json:"role_id"`
	Role   string `db:"role" json:"role"`
	Rv     int32  `db:"rv" json:"rv"`
}

type UpdateRoleByIdRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateRoleById(ctx context.Context, arg UpdateRoleByIdParams) (UpdateRoleByIdRow, error) {
	row := q.queryRow(ctx, q.updateRoleByIdStmt, updateRoleById, arg.RoleID, arg.Role, arg.Rv)
	var i UpdateRoleByIdRow
	err := row.Scan(&i.RoleID, &i.Role, &i.UpdatedAt)
	return i, err
}

const updateRoleByName = `-- name: UpdateRoleByName :one
UPDATE
  roles 
SET 
  (role, updated_at, rv) = ($2, now(), $3)
WHERE
  role = $1 AND deleted = false RETURNING role_id, role, updated_at
`

type UpdateRoleByNameParams struct {
	Role   string `db:"role" json:"role"`
	Role_2 string `db:"role_2" json:"role_2"`
	Rv     int32  `db:"rv" json:"rv"`
}

type UpdateRoleByNameRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateRoleByName(ctx context.Context, arg UpdateRoleByNameParams) (UpdateRoleByNameRow, error) {
	row := q.queryRow(ctx, q.updateRoleByNameStmt, updateRoleByName, arg.Role, arg.Role_2, arg.Rv)
	var i UpdateRoleByNameRow
	err := row.Scan(&i.RoleID, &i.Role, &i.UpdatedAt)
	return i, err
}
