// Code generated by sqlc. DO NOT EDIT.
// source: positions.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"
)

const createPositionBasic = `-- name: CreatePositionBasic :one
INSERT INTO 
  positions(department, position, rv)
VALUES 
  ($1, $2, $3) RETURNING position_id, department, position
`

type CreatePositionBasicParams struct {
	Department string `db:"department" json:"department"`
	Position   string `db:"position" json:"position"`
	Rv         int32  `db:"rv" json:"rv"`
}

type CreatePositionBasicRow struct {
	PositionID int64  `db:"position_id" json:"position_id"`
	Department string `db:"department" json:"department"`
	Position   string `db:"position" json:"position"`
}

func (q *Queries) CreatePositionBasic(ctx context.Context, arg CreatePositionBasicParams) (CreatePositionBasicRow, error) {
	row := q.queryRow(ctx, q.createPositionBasicStmt, createPositionBasic, arg.Department, arg.Position, arg.Rv)
	var i CreatePositionBasicRow
	err := row.Scan(&i.PositionID, &i.Department, &i.Position)
	return i, err
}

const deletePosition = `-- name: DeletePosition :exec
UPDATE
  positions 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  position_id = $1 AND deleted = false
`

func (q *Queries) DeletePosition(ctx context.Context, positionID int64) error {
	_, err := q.exec(ctx, q.deletePositionStmt, deletePosition, positionID)
	return err
}

const getPositionByDepartment = `-- name: GetPositionByDepartment :one
SELECT 
  position_id, department, position, created_at, updated_at
FROM 
  positions
WHERE 
  department = $1 AND deleted = false
`

type GetPositionByDepartmentRow struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Department string       `db:"department" json:"department"`
	Position   string       `db:"position" json:"position"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetPositionByDepartment(ctx context.Context, department string) (GetPositionByDepartmentRow, error) {
	row := q.queryRow(ctx, q.getPositionByDepartmentStmt, getPositionByDepartment, department)
	var i GetPositionByDepartmentRow
	err := row.Scan(
		&i.PositionID,
		&i.Department,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPositionById = `-- name: GetPositionById :one
SELECT 
  position_id, department, position, created_at, updated_at
FROM 
  positions
WHERE 
  position_id = $1 AND deleted = false
`

type GetPositionByIdRow struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Department string       `db:"department" json:"department"`
	Position   string       `db:"position" json:"position"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetPositionById(ctx context.Context, positionID int64) (GetPositionByIdRow, error) {
	row := q.queryRow(ctx, q.getPositionByIdStmt, getPositionById, positionID)
	var i GetPositionByIdRow
	err := row.Scan(
		&i.PositionID,
		&i.Department,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPositionByName = `-- name: GetPositionByName :one
SELECT 
  position_id, department, position, created_at, updated_at
FROM 
  positions
WHERE 
  position = $1 AND deleted = false
`

type GetPositionByNameRow struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Department string       `db:"department" json:"department"`
	Position   string       `db:"position" json:"position"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetPositionByName(ctx context.Context, position string) (GetPositionByNameRow, error) {
	row := q.queryRow(ctx, q.getPositionByNameStmt, getPositionByName, position)
	var i GetPositionByNameRow
	err := row.Scan(
		&i.PositionID,
		&i.Department,
		&i.Position,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPositions = `-- name: GetPositions :many
SELECT 
  position_id, department, position, created_at, updated_at
FROM 
  positions
WHERE 
  deleted = false
`

type GetPositionsRow struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Department string       `db:"department" json:"department"`
	Position   string       `db:"position" json:"position"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetPositions(ctx context.Context) ([]GetPositionsRow, error) {
	rows, err := q.query(ctx, q.getPositionsStmt, getPositions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPositionsRow
	for rows.Next() {
		var i GetPositionsRow
		if err := rows.Scan(
			&i.PositionID,
			&i.Department,
			&i.Position,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostionById = `-- name: UpdatePostionById :one
UPDATE
  positions 
SET 
  (position, department, updated_at, rv) = ($2, now(), $3)
WHERE
  position_id = $1 AND deleted = false RETURNING position_id, position, department, updated_at
`

type UpdatePostionByIdParams struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Position   string       `db:"position" json:"position"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

type UpdatePostionByIdRow struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Position   string       `db:"position" json:"position"`
	Department string       `db:"department" json:"department"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdatePostionById(ctx context.Context, arg UpdatePostionByIdParams) (UpdatePostionByIdRow, error) {
	row := q.queryRow(ctx, q.updatePostionByIdStmt, updatePostionById, arg.PositionID, arg.Position, arg.UpdatedAt)
	var i UpdatePostionByIdRow
	err := row.Scan(
		&i.PositionID,
		&i.Position,
		&i.Department,
		&i.UpdatedAt,
	)
	return i, err
}
