// Code generated by sqlc. DO NOT EDIT.
// source: teamsAppsCompanies.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"
)

const createTeamsAppsCompanies = `-- name: CreateTeamsAppsCompanies :one
INSERT INTO 
  teams_apps_companies(team_id, app_id, company_id, rv)
VALUES 
  ($1, $2, $3, $4) RETURNING team_app_company_id, team_id, app_id, company_id
`

type CreateTeamsAppsCompaniesParams struct {
	TeamID    sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID     sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID sql.NullInt64 `db:"company_id" json:"company_id"`
	Rv        sql.NullInt32 `db:"rv" json:"rv"`
}

type CreateTeamsAppsCompaniesRow struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
}

func (q *Queries) CreateTeamsAppsCompanies(ctx context.Context, arg CreateTeamsAppsCompaniesParams) (CreateTeamsAppsCompaniesRow, error) {
	row := q.queryRow(ctx, q.createTeamsAppsCompaniesStmt, createTeamsAppsCompanies,
		arg.TeamID,
		arg.AppID,
		arg.CompanyID,
		arg.Rv,
	)
	var i CreateTeamsAppsCompaniesRow
	err := row.Scan(
		&i.TeamAppCompanyID,
		&i.TeamID,
		&i.AppID,
		&i.CompanyID,
	)
	return i, err
}

const deleteTeamsAppsCompanies = `-- name: DeleteTeamsAppsCompanies :exec
UPDATE
  teams_apps_companies
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  team_app_company_id = $1 AND deleted = false
`

func (q *Queries) DeleteTeamsAppsCompanies(ctx context.Context, teamAppCompanyID int64) error {
	_, err := q.exec(ctx, q.deleteTeamsAppsCompaniesStmt, deleteTeamsAppsCompanies, teamAppCompanyID)
	return err
}

const getTeamsAppsCompanies = `-- name: GetTeamsAppsCompanies :many
SELECT 
  team_app_company_id, team_id, app_id, company_id, created_at, updated_at
FROM 
  teams_apps_companies
WHERE 
  deleted = false
LIMIT $1
OFFSET $2
`

type GetTeamsAppsCompaniesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetTeamsAppsCompaniesRow struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
	CreatedAt        time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt        sql.NullTime  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetTeamsAppsCompanies(ctx context.Context, arg GetTeamsAppsCompaniesParams) ([]GetTeamsAppsCompaniesRow, error) {
	rows, err := q.query(ctx, q.getTeamsAppsCompaniesStmt, getTeamsAppsCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamsAppsCompaniesRow
	for rows.Next() {
		var i GetTeamsAppsCompaniesRow
		if err := rows.Scan(
			&i.TeamAppCompanyID,
			&i.TeamID,
			&i.AppID,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsAppsCompaniesById = `-- name: GetTeamsAppsCompaniesById :one
SELECT 
  team_app_company_id, team_id, app_id, company_id, created_at, updated_at
FROM 
  teams_apps_companies
WHERE 
  team_app_company_id = $1 AND deleted = false
`

type GetTeamsAppsCompaniesByIdRow struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
	CreatedAt        time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt        sql.NullTime  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetTeamsAppsCompaniesById(ctx context.Context, teamAppCompanyID int64) (GetTeamsAppsCompaniesByIdRow, error) {
	row := q.queryRow(ctx, q.getTeamsAppsCompaniesByIdStmt, getTeamsAppsCompaniesById, teamAppCompanyID)
	var i GetTeamsAppsCompaniesByIdRow
	err := row.Scan(
		&i.TeamAppCompanyID,
		&i.TeamID,
		&i.AppID,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTeamAppCompany = `-- name: UpdateTeamAppCompany :one
UPDATE
  teams_apps_companies
SET 
  (team_id, app_id, company_id, updated_at, rv) 
  = ($2, $3, $4, now(), $5)
WHERE
  team_app_company_id = $1 AND deleted = false RETURNING team_app_company_id, team_id, app_id, company_id, updated_at
`

type UpdateTeamAppCompanyParams struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
	Rv               sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateTeamAppCompanyRow struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
	UpdatedAt        sql.NullTime  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateTeamAppCompany(ctx context.Context, arg UpdateTeamAppCompanyParams) (UpdateTeamAppCompanyRow, error) {
	row := q.queryRow(ctx, q.updateTeamAppCompanyStmt, updateTeamAppCompany,
		arg.TeamAppCompanyID,
		arg.TeamID,
		arg.AppID,
		arg.CompanyID,
		arg.Rv,
	)
	var i UpdateTeamAppCompanyRow
	err := row.Scan(
		&i.TeamAppCompanyID,
		&i.TeamID,
		&i.AppID,
		&i.CompanyID,
		&i.UpdatedAt,
	)
	return i, err
}
