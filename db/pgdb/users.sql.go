// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUserBasic = `-- name: CreateUserBasic :one
INSERT INTO 
  users(email, username, status_id, cred_id, user_info_id, rv)
VALUES 
  ($1, $2, $3, $4, $5, $6) RETURNING user_id, email, username, user_info_id, created_at
`

type CreateUserBasicParams struct {
	Email      string    `db:"email" json:"email"`
	Username   string    `db:"username" json:"username"`
	StatusID   int64     `db:"status_id" json:"status_id"`
	CredID     uuid.UUID `db:"cred_id" json:"cred_id"`
	UserInfoID uuid.UUID `db:"user_info_id" json:"user_info_id"`
	Rv         int32     `db:"rv" json:"rv"`
}

type CreateUserBasicRow struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	Email      string    `db:"email" json:"email"`
	Username   string    `db:"username" json:"username"`
	UserInfoID uuid.UUID `db:"user_info_id" json:"user_info_id"`
	CreatedAt  time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateUserBasic(ctx context.Context, arg CreateUserBasicParams) (CreateUserBasicRow, error) {
	row := q.queryRow(ctx, q.createUserBasicStmt, createUserBasic,
		arg.Email,
		arg.Username,
		arg.StatusID,
		arg.CredID,
		arg.UserInfoID,
		arg.Rv,
	)
	var i CreateUserBasicRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.UserInfoID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserBasic = `-- name: GetUserBasic :one
SELECT 
  email, username, cred_id, user_info_id, status_id, updated_at
FROM 
  users 
WHERE 
  (email = $1 OR username = $2) AND deleted = false
`

type GetUserBasicParams struct {
	Email    string `db:"email" json:"email"`
	Username string `db:"username" json:"username"`
}

type GetUserBasicRow struct {
	Email      string       `db:"email" json:"email"`
	Username   string       `db:"username" json:"username"`
	CredID     uuid.UUID    `db:"cred_id" json:"cred_id"`
	UserInfoID uuid.UUID    `db:"user_info_id" json:"user_info_id"`
	StatusID   int64        `db:"status_id" json:"status_id"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserBasic(ctx context.Context, arg GetUserBasicParams) (GetUserBasicRow, error) {
	row := q.queryRow(ctx, q.getUserBasicStmt, getUserBasic, arg.Email, arg.Username)
	var i GetUserBasicRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.CredID,
		&i.UserInfoID,
		&i.StatusID,
		&i.UpdatedAt,
	)
	return i, err
}
