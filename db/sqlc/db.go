// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCredFirstStmt, err = db.PrepareContext(ctx, createCredFirst); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCredFirst: %w", err)
	}
	if q.createIndustryStmt, err = db.PrepareContext(ctx, createIndustry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIndustry: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createUserBaseInfoStmt, err = db.PrepareContext(ctx, createUserBaseInfo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserBaseInfo: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCredFirstStmt != nil {
		if cerr := q.createCredFirstStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCredFirstStmt: %w", cerr)
		}
	}
	if q.createIndustryStmt != nil {
		if cerr := q.createIndustryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIndustryStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createUserBaseInfoStmt != nil {
		if cerr := q.createUserBaseInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserBaseInfoStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                     DBTX
	tx                     *sql.Tx
	createCredFirstStmt    *sql.Stmt
	createIndustryStmt     *sql.Stmt
	createRoleStmt         *sql.Stmt
	createUserBaseInfoStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                     tx,
		tx:                     tx,
		createCredFirstStmt:    q.createCredFirstStmt,
		createIndustryStmt:     q.createIndustryStmt,
		createRoleStmt:         q.createRoleStmt,
		createUserBaseInfoStmt: q.createUserBaseInfoStmt,
	}
}
