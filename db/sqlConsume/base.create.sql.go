// Code generated by sqlc. DO NOT EDIT.
// source: base.create.sql

package pgdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAppBasic = `-- name: CreateAppBasic :one
INSERT INTO 
  apps(app, app_base_os, desktop, web, mobile, ios, android, pwa, paid, industry_id, rv)
VALUES 
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING app_id, app
`

type CreateAppBasicParams struct {
	App        string        `db:"app" json:"app"`
	AppBaseOs  string        `db:"app_base_os" json:"app_base_os"`
	Desktop    sql.NullBool  `db:"desktop" json:"desktop"`
	Web        sql.NullBool  `db:"web" json:"web"`
	Mobile     sql.NullBool  `db:"mobile" json:"mobile"`
	Ios        sql.NullBool  `db:"ios" json:"ios"`
	Android    sql.NullBool  `db:"android" json:"android"`
	Pwa        sql.NullBool  `db:"pwa" json:"pwa"`
	Paid       sql.NullBool  `db:"paid" json:"paid"`
	IndustryID int64         `db:"industry_id" json:"industry_id"`
	Rv         sql.NullInt32 `db:"rv" json:"rv"`
}

type CreateAppBasicRow struct {
	AppID int64  `db:"app_id" json:"app_id"`
	App   string `db:"app" json:"app"`
}

func (q *Queries) CreateAppBasic(ctx context.Context, arg CreateAppBasicParams) (CreateAppBasicRow, error) {
	row := q.queryRow(ctx, q.createAppBasicStmt, createAppBasic,
		arg.App,
		arg.AppBaseOs,
		arg.Desktop,
		arg.Web,
		arg.Mobile,
		arg.Ios,
		arg.Android,
		arg.Pwa,
		arg.Paid,
		arg.IndustryID,
		arg.Rv,
	)
	var i CreateAppBasicRow
	err := row.Scan(&i.AppID, &i.App)
	return i, err
}

const createBankAccountAllBasic = `-- name: CreateBankAccountAllBasic :exec
INSERT INTO 
  bank_account_all(account_1, rv)
VALUES 
  ($1, $2)
`

type CreateBankAccountAllBasicParams struct {
	Account1 sql.NullInt64 `db:"account_1" json:"account_1"`
	Rv       sql.NullInt32 `db:"rv" json:"rv"`
}

func (q *Queries) CreateBankAccountAllBasic(ctx context.Context, arg CreateBankAccountAllBasicParams) error {
	_, err := q.exec(ctx, q.createBankAccountAllBasicStmt, createBankAccountAllBasic, arg.Account1, arg.Rv)
	return err
}

const createBankAccountBasic = `-- name: CreateBankAccountBasic :one
INSERT INTO 
  bank_account(bank, account_number, account_type, isbn, rv)
VALUES 
  ($1, $2, $3, $4, $5) RETURNING bank_account_id
`

type CreateBankAccountBasicParams struct {
	Bank          string `db:"bank" json:"bank"`
	AccountNumber string `db:"account_number" json:"account_number"`
	AccountType   string `db:"account_type" json:"account_type"`
	Isbn          string `db:"isbn" json:"isbn"`
	Rv            int32  `db:"rv" json:"rv"`
}

func (q *Queries) CreateBankAccountBasic(ctx context.Context, arg CreateBankAccountBasicParams) (int64, error) {
	row := q.queryRow(ctx, q.createBankAccountBasicStmt, createBankAccountBasic,
		arg.Bank,
		arg.AccountNumber,
		arg.AccountType,
		arg.Isbn,
		arg.Rv,
	)
	var bank_account_id int64
	err := row.Scan(&bank_account_id)
	return bank_account_id, err
}

const createBusinessLogs = `-- name: CreateBusinessLogs :one
INSERT INTO 
  business_logs(event, device, os, ip, agent, position_id, company_id, role_id, team_id, app_id, creator)
VALUES 
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING business_log_id, event, device, os, ip, agent, position_id, company_id, role_id, team_id, app_id, creator, created_at
`

type CreateBusinessLogsParams struct {
	Event      string        `db:"event" json:"event"`
	Device     string        `db:"device" json:"device"`
	Os         string        `db:"os" json:"os"`
	Ip         string        `db:"ip" json:"ip"`
	Agent      string        `db:"agent" json:"agent"`
	PositionID sql.NullInt64 `db:"position_id" json:"position_id"`
	CompanyID  sql.NullInt64 `db:"company_id" json:"company_id"`
	RoleID     int64         `db:"role_id" json:"role_id"`
	TeamID     sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID      int64         `db:"app_id" json:"app_id"`
	Creator    uuid.UUID     `db:"creator" json:"creator"`
}

func (q *Queries) CreateBusinessLogs(ctx context.Context, arg CreateBusinessLogsParams) (BusinessLog, error) {
	row := q.queryRow(ctx, q.createBusinessLogsStmt, createBusinessLogs,
		arg.Event,
		arg.Device,
		arg.Os,
		arg.Ip,
		arg.Agent,
		arg.PositionID,
		arg.CompanyID,
		arg.RoleID,
		arg.TeamID,
		arg.AppID,
		arg.Creator,
	)
	var i BusinessLog
	err := row.Scan(
		&i.BusinessLogID,
		&i.Event,
		&i.Device,
		&i.Os,
		&i.Ip,
		&i.Agent,
		&i.PositionID,
		&i.CompanyID,
		&i.RoleID,
		&i.TeamID,
		&i.AppID,
		&i.Creator,
		&i.CreatedAt,
	)
	return i, err
}

const createCompanyBasic = `-- name: CreateCompanyBasic :one
INSERT INTO 
  companies(company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, rv)
VALUES 
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING company_id, company
`

type CreateCompanyBasicParams struct {
	Company    string         `db:"company" json:"company"`
	Bio        string         `db:"bio" json:"bio"`
	Country    string         `db:"country" json:"country"`
	Region     string         `db:"region" json:"region"`
	Ceo        sql.NullString `db:"ceo" json:"ceo"`
	Manager    sql.NullString `db:"manager" json:"manager"`
	Hr         sql.NullString `db:"hr" json:"hr"`
	Address    string         `db:"address" json:"address"`
	HowClean   int32          `db:"how_clean" json:"how_clean"`
	IndustryID int64          `db:"industry_id" json:"industry_id"`
	Rv         sql.NullInt32  `db:"rv" json:"rv"`
}

type CreateCompanyBasicRow struct {
	CompanyID int32  `db:"company_id" json:"company_id"`
	Company   string `db:"company" json:"company"`
}

func (q *Queries) CreateCompanyBasic(ctx context.Context, arg CreateCompanyBasicParams) (CreateCompanyBasicRow, error) {
	row := q.queryRow(ctx, q.createCompanyBasicStmt, createCompanyBasic,
		arg.Company,
		arg.Bio,
		arg.Country,
		arg.Region,
		arg.Ceo,
		arg.Manager,
		arg.Hr,
		arg.Address,
		arg.HowClean,
		arg.IndustryID,
		arg.Rv,
	)
	var i CreateCompanyBasicRow
	err := row.Scan(&i.CompanyID, &i.Company)
	return i, err
}

const createIndustryBasic = `-- name: CreateIndustryBasic :one
INSERT INTO 
  industries(industry, how_clean, rv)
VALUES 
  ($1, $2, $3) RETURNING industry_id, industry
`

type CreateIndustryBasicParams struct {
	Industry string        `db:"industry" json:"industry"`
	HowClean int32         `db:"how_clean" json:"how_clean"`
	Rv       sql.NullInt32 `db:"rv" json:"rv"`
}

type CreateIndustryBasicRow struct {
	IndustryID int64  `db:"industry_id" json:"industry_id"`
	Industry   string `db:"industry" json:"industry"`
}

func (q *Queries) CreateIndustryBasic(ctx context.Context, arg CreateIndustryBasicParams) (CreateIndustryBasicRow, error) {
	row := q.queryRow(ctx, q.createIndustryBasicStmt, createIndustryBasic, arg.Industry, arg.HowClean, arg.Rv)
	var i CreateIndustryBasicRow
	err := row.Scan(&i.IndustryID, &i.Industry)
	return i, err
}

const createPositionBasic = `-- name: CreatePositionBasic :one
INSERT INTO 
  positions(department, position, rv)
VALUES 
  ($1, $2, $3) RETURNING position_id, department, position
`

type CreatePositionBasicParams struct {
	Department string `db:"department" json:"department"`
	Position   string `db:"position" json:"position"`
	Rv         int32  `db:"rv" json:"rv"`
}

type CreatePositionBasicRow struct {
	PositionID int64  `db:"position_id" json:"position_id"`
	Department string `db:"department" json:"department"`
	Position   string `db:"position" json:"position"`
}

func (q *Queries) CreatePositionBasic(ctx context.Context, arg CreatePositionBasicParams) (CreatePositionBasicRow, error) {
	row := q.queryRow(ctx, q.createPositionBasicStmt, createPositionBasic, arg.Department, arg.Position, arg.Rv)
	var i CreatePositionBasicRow
	err := row.Scan(&i.PositionID, &i.Department, &i.Position)
	return i, err
}

const createRoleBasic = `-- name: CreateRoleBasic :one
INSERT INTO 
  roles(role, rv)
VALUES 
  ($1, $2) RETURNING role_id, role
`

type CreateRoleBasicParams struct {
	Role string `db:"role" json:"role"`
	Rv   int32  `db:"rv" json:"rv"`
}

type CreateRoleBasicRow struct {
	RoleID int64  `db:"role_id" json:"role_id"`
	Role   string `db:"role" json:"role"`
}

func (q *Queries) CreateRoleBasic(ctx context.Context, arg CreateRoleBasicParams) (CreateRoleBasicRow, error) {
	row := q.queryRow(ctx, q.createRoleBasicStmt, createRoleBasic, arg.Role, arg.Rv)
	var i CreateRoleBasicRow
	err := row.Scan(&i.RoleID, &i.Role)
	return i, err
}

const createStatusBasic = `-- name: CreateStatusBasic :one
INSERT INTO 
  statuses(status, rv)
VALUES 
  ($1, $2) RETURNING status_id, status
`

type CreateStatusBasicParams struct {
	Status sql.NullString `db:"status" json:"status"`
	Rv     int32          `db:"rv" json:"rv"`
}

type CreateStatusBasicRow struct {
	StatusID int64          `db:"status_id" json:"status_id"`
	Status   sql.NullString `db:"status" json:"status"`
}

func (q *Queries) CreateStatusBasic(ctx context.Context, arg CreateStatusBasicParams) (CreateStatusBasicRow, error) {
	row := q.queryRow(ctx, q.createStatusBasicStmt, createStatusBasic, arg.Status, arg.Rv)
	var i CreateStatusBasicRow
	err := row.Scan(&i.StatusID, &i.Status)
	return i, err
}

const createTeamBasic = `-- name: CreateTeamBasic :one
INSERT INTO 
  teams(team, industry_id, rv)
VALUES 
  ($1, $2, $3) RETURNING team_id, team
`

type CreateTeamBasicParams struct {
	Team       string `db:"team" json:"team"`
	IndustryID int64  `db:"industry_id" json:"industry_id"`
	Rv         int32  `db:"rv" json:"rv"`
}

type CreateTeamBasicRow struct {
	TeamID int64  `db:"team_id" json:"team_id"`
	Team   string `db:"team" json:"team"`
}

func (q *Queries) CreateTeamBasic(ctx context.Context, arg CreateTeamBasicParams) (CreateTeamBasicRow, error) {
	row := q.queryRow(ctx, q.createTeamBasicStmt, createTeamBasic, arg.Team, arg.IndustryID, arg.Rv)
	var i CreateTeamBasicRow
	err := row.Scan(&i.TeamID, &i.Team)
	return i, err
}

const createTeamsAppsCompanies = `-- name: CreateTeamsAppsCompanies :one
INSERT INTO 
  teams_apps_companies(team_id, app_id, company_id, rv)
VALUES 
  ($1, $2, $3, $4) RETURNING team_app_company_id, team_id, app_id, company_id
`

type CreateTeamsAppsCompaniesParams struct {
	TeamID    sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID     sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID sql.NullInt64 `db:"company_id" json:"company_id"`
	Rv        sql.NullInt32 `db:"rv" json:"rv"`
}

type CreateTeamsAppsCompaniesRow struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
}

func (q *Queries) CreateTeamsAppsCompanies(ctx context.Context, arg CreateTeamsAppsCompaniesParams) (CreateTeamsAppsCompaniesRow, error) {
	row := q.queryRow(ctx, q.createTeamsAppsCompaniesStmt, createTeamsAppsCompanies,
		arg.TeamID,
		arg.AppID,
		arg.CompanyID,
		arg.Rv,
	)
	var i CreateTeamsAppsCompaniesRow
	err := row.Scan(
		&i.TeamAppCompanyID,
		&i.TeamID,
		&i.AppID,
		&i.CompanyID,
	)
	return i, err
}
