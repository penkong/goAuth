// Code generated by sqlc. DO NOT EDIT.
// source: base.update.sql

package pgdb

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const updateAppById = `-- name: UpdateAppById :one
UPDATE
  apps
SET 
  (paid, updated_at, rv) = ($1, now(), $2)
WHERE
  app_id = $1 AND deleted = false RETURNING app_id, app, paid, updated_at
`

type UpdateAppByIdParams struct {
	Paid sql.NullBool  `db:"paid" json:"paid"`
	Rv   sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateAppByIdRow struct {
	AppID     int64        `db:"app_id" json:"app_id"`
	App       string       `db:"app" json:"app"`
	Paid      sql.NullBool `db:"paid" json:"paid"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateAppById(ctx context.Context, arg UpdateAppByIdParams) (UpdateAppByIdRow, error) {
	row := q.queryRow(ctx, q.updateAppByIdStmt, updateAppById, arg.Paid, arg.Rv)
	var i UpdateAppByIdRow
	err := row.Scan(
		&i.AppID,
		&i.App,
		&i.Paid,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppByName = `-- name: UpdateAppByName :one
UPDATE
  apps
SET 
  (app, industry_id, updated_at, rv) = ($2, $3, now(), $4)
WHERE
  app = $1 AND deleted = false RETURNING app_id, app , updated_at
`

type UpdateAppByNameParams struct {
	App        string        `db:"app" json:"app"`
	App_2      string        `db:"app_2" json:"app_2"`
	IndustryID int64         `db:"industry_id" json:"industry_id"`
	Rv         sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateAppByNameRow struct {
	AppID     int64        `db:"app_id" json:"app_id"`
	App       string       `db:"app" json:"app"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateAppByName(ctx context.Context, arg UpdateAppByNameParams) (UpdateAppByNameRow, error) {
	row := q.queryRow(ctx, q.updateAppByNameStmt, updateAppByName,
		arg.App,
		arg.App_2,
		arg.IndustryID,
		arg.Rv,
	)
	var i UpdateAppByNameRow
	err := row.Scan(&i.AppID, &i.App, &i.UpdatedAt)
	return i, err
}

const updateAppByPaid = `-- name: UpdateAppByPaid :one
UPDATE
  apps
SET 
  (paid, updated_at, rv) = ($2, now(), $3)
WHERE
  app_id = $1 AND deleted = false RETURNING app_id, app, paid, updated_at
`

type UpdateAppByPaidParams struct {
	AppID int64         `db:"app_id" json:"app_id"`
	Paid  sql.NullBool  `db:"paid" json:"paid"`
	Rv    sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateAppByPaidRow struct {
	AppID     int64        `db:"app_id" json:"app_id"`
	App       string       `db:"app" json:"app"`
	Paid      sql.NullBool `db:"paid" json:"paid"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateAppByPaid(ctx context.Context, arg UpdateAppByPaidParams) (UpdateAppByPaidRow, error) {
	row := q.queryRow(ctx, q.updateAppByPaidStmt, updateAppByPaid, arg.AppID, arg.Paid, arg.Rv)
	var i UpdateAppByPaidRow
	err := row.Scan(
		&i.AppID,
		&i.App,
		&i.Paid,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppEnvs = `-- name: UpdateAppEnvs :one
UPDATE
  apps
SET 
  (app_base_os, desktop, web, mobile, ios, android, pwa, updated_at, rv) = ($2, $3, $4, $5, $6, now(), $7)
WHERE
  app = $1 AND deleted = false RETURNING app_id, app , updated_at
`

type UpdateAppEnvsParams struct {
	App       string       `db:"app" json:"app"`
	AppBaseOs string       `db:"app_base_os" json:"app_base_os"`
	Desktop   sql.NullBool `db:"desktop" json:"desktop"`
	Web       sql.NullBool `db:"web" json:"web"`
	Mobile    sql.NullBool `db:"mobile" json:"mobile"`
	Ios       sql.NullBool `db:"ios" json:"ios"`
	Pwa       sql.NullBool `db:"pwa" json:"pwa"`
}

type UpdateAppEnvsRow struct {
	AppID     int64        `db:"app_id" json:"app_id"`
	App       string       `db:"app" json:"app"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateAppEnvs(ctx context.Context, arg UpdateAppEnvsParams) (UpdateAppEnvsRow, error) {
	row := q.queryRow(ctx, q.updateAppEnvsStmt, updateAppEnvs,
		arg.App,
		arg.AppBaseOs,
		arg.Desktop,
		arg.Web,
		arg.Mobile,
		arg.Ios,
		arg.Pwa,
	)
	var i UpdateAppEnvsRow
	err := row.Scan(&i.AppID, &i.App, &i.UpdatedAt)
	return i, err
}

const updateBankAccount = `-- name: UpdateBankAccount :exec
UPDATE
  bank_account
SET 
  (bank, account_number, account_type, isbn, updated_at, rv) 
  = ($2, $3, $4, $5, now(), $6)
WHERE
  bank_account_id = $1 AND deleted = false
`

type UpdateBankAccountParams struct {
	BankAccountID int64  `db:"bank_account_id" json:"bank_account_id"`
	Bank          string `db:"bank" json:"bank"`
	AccountNumber string `db:"account_number" json:"account_number"`
	AccountType   string `db:"account_type" json:"account_type"`
	Isbn          string `db:"isbn" json:"isbn"`
	Rv            int32  `db:"rv" json:"rv"`
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) error {
	_, err := q.exec(ctx, q.updateBankAccountStmt, updateBankAccount,
		arg.BankAccountID,
		arg.Bank,
		arg.AccountNumber,
		arg.AccountType,
		arg.Isbn,
		arg.Rv,
	)
	return err
}

const updateBankAccountAll = `-- name: UpdateBankAccountAll :exec
UPDATE
  bank_account_all
SET 
  (account_1, account_2, account_3, account_4, account_5, updated_at, rv) 
  = ($2, $3, $4, $5, $6, now(), $7)
WHERE
  bank_account_all_id = $1 AND deleted = false
`

type UpdateBankAccountAllParams struct {
	BankAccountAllID uuid.UUID     `db:"bank_account_all_id" json:"bank_account_all_id"`
	Account1         sql.NullInt64 `db:"account_1" json:"account_1"`
	Account2         sql.NullInt64 `db:"account_2" json:"account_2"`
	Account3         sql.NullInt64 `db:"account_3" json:"account_3"`
	Account4         sql.NullInt64 `db:"account_4" json:"account_4"`
	Account5         sql.NullInt64 `db:"account_5" json:"account_5"`
	Rv               sql.NullInt32 `db:"rv" json:"rv"`
}

func (q *Queries) UpdateBankAccountAll(ctx context.Context, arg UpdateBankAccountAllParams) error {
	_, err := q.exec(ctx, q.updateBankAccountAllStmt, updateBankAccountAll,
		arg.BankAccountAllID,
		arg.Account1,
		arg.Account2,
		arg.Account3,
		arg.Account4,
		arg.Account5,
		arg.Rv,
	)
	return err
}

const updateCompanyBankAccount = `-- name: UpdateCompanyBankAccount :one
UPDATE
  companies
SET 
  (bank_account_all_id, updated_at, rv) 
  = ($2, now(), $3)
WHERE
  company_id = $1 AND deleted = false RETURNING company_id, company, updated_at
`

type UpdateCompanyBankAccountParams struct {
	CompanyID        int32         `db:"company_id" json:"company_id"`
	BankAccountAllID uuid.UUID     `db:"bank_account_all_id" json:"bank_account_all_id"`
	Rv               sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateCompanyBankAccountRow struct {
	CompanyID int32        `db:"company_id" json:"company_id"`
	Company   string       `db:"company" json:"company"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateCompanyBankAccount(ctx context.Context, arg UpdateCompanyBankAccountParams) (UpdateCompanyBankAccountRow, error) {
	row := q.queryRow(ctx, q.updateCompanyBankAccountStmt, updateCompanyBankAccount, arg.CompanyID, arg.BankAccountAllID, arg.Rv)
	var i UpdateCompanyBankAccountRow
	err := row.Scan(&i.CompanyID, &i.Company, &i.UpdatedAt)
	return i, err
}

const updateCompanyById = `-- name: UpdateCompanyById :one
UPDATE
  companies
SET 
  (company, bio, country, region, ceo, manager, hr, address, how_clean, industry_id, updated_at, rv) 
  = ($2, $3, $4, $5, $6, $7, $8, $9, $10, $11, now(), $12)
WHERE
  company_id = $1 AND deleted = false RETURNING company_id, company, industry_id, updated_at
`

type UpdateCompanyByIdParams struct {
	CompanyID  int32          `db:"company_id" json:"company_id"`
	Company    string         `db:"company" json:"company"`
	Bio        string         `db:"bio" json:"bio"`
	Country    string         `db:"country" json:"country"`
	Region     string         `db:"region" json:"region"`
	Ceo        sql.NullString `db:"ceo" json:"ceo"`
	Manager    sql.NullString `db:"manager" json:"manager"`
	Hr         sql.NullString `db:"hr" json:"hr"`
	Address    string         `db:"address" json:"address"`
	HowClean   int32          `db:"how_clean" json:"how_clean"`
	IndustryID int64          `db:"industry_id" json:"industry_id"`
	Rv         sql.NullInt32  `db:"rv" json:"rv"`
}

type UpdateCompanyByIdRow struct {
	CompanyID  int32        `db:"company_id" json:"company_id"`
	Company    string       `db:"company" json:"company"`
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateCompanyById(ctx context.Context, arg UpdateCompanyByIdParams) (UpdateCompanyByIdRow, error) {
	row := q.queryRow(ctx, q.updateCompanyByIdStmt, updateCompanyById,
		arg.CompanyID,
		arg.Company,
		arg.Bio,
		arg.Country,
		arg.Region,
		arg.Ceo,
		arg.Manager,
		arg.Hr,
		arg.Address,
		arg.HowClean,
		arg.IndustryID,
		arg.Rv,
	)
	var i UpdateCompanyByIdRow
	err := row.Scan(
		&i.CompanyID,
		&i.Company,
		&i.IndustryID,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePostionById = `-- name: UpdatePostionById :one
UPDATE
  positions 
SET 
  (position, department, updated_at, rv) = ($2, now(), $3)
WHERE
  position_id = $1 AND deleted = false RETURNING position_id, position, department, updated_at
`

type UpdatePostionByIdParams struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Position   string       `db:"position" json:"position"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

type UpdatePostionByIdRow struct {
	PositionID int64        `db:"position_id" json:"position_id"`
	Position   string       `db:"position" json:"position"`
	Department string       `db:"department" json:"department"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdatePostionById(ctx context.Context, arg UpdatePostionByIdParams) (UpdatePostionByIdRow, error) {
	row := q.queryRow(ctx, q.updatePostionByIdStmt, updatePostionById, arg.PositionID, arg.Position, arg.UpdatedAt)
	var i UpdatePostionByIdRow
	err := row.Scan(
		&i.PositionID,
		&i.Position,
		&i.Department,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRoleById = `-- name: UpdateRoleById :one
UPDATE
  roles 
SET 
  (role, updated_at, rv) = ($2, now(), $3)
WHERE
  role_id = $1 AND deleted = false RETURNING role_id, role, updated_at
`

type UpdateRoleByIdParams struct {
	RoleID int64  `db:"role_id" json:"role_id"`
	Role   string `db:"role" json:"role"`
	Rv     int32  `db:"rv" json:"rv"`
}

type UpdateRoleByIdRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateRoleById(ctx context.Context, arg UpdateRoleByIdParams) (UpdateRoleByIdRow, error) {
	row := q.queryRow(ctx, q.updateRoleByIdStmt, updateRoleById, arg.RoleID, arg.Role, arg.Rv)
	var i UpdateRoleByIdRow
	err := row.Scan(&i.RoleID, &i.Role, &i.UpdatedAt)
	return i, err
}

const updateRoleByName = `-- name: UpdateRoleByName :one
UPDATE
  roles 
SET 
  (role, updated_at, rv) = ($2, now(), $3)
WHERE
  role = $1 AND deleted = false RETURNING role_id, role, updated_at
`

type UpdateRoleByNameParams struct {
	Role   string `db:"role" json:"role"`
	Role_2 string `db:"role_2" json:"role_2"`
	Rv     int32  `db:"rv" json:"rv"`
}

type UpdateRoleByNameRow struct {
	RoleID    int64        `db:"role_id" json:"role_id"`
	Role      string       `db:"role" json:"role"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateRoleByName(ctx context.Context, arg UpdateRoleByNameParams) (UpdateRoleByNameRow, error) {
	row := q.queryRow(ctx, q.updateRoleByNameStmt, updateRoleByName, arg.Role, arg.Role_2, arg.Rv)
	var i UpdateRoleByNameRow
	err := row.Scan(&i.RoleID, &i.Role, &i.UpdatedAt)
	return i, err
}

const updateSatusById = `-- name: UpdateSatusById :one
UPDATE
  statuses 
SET 
  (status, updated_at, rv) = ($2, now(), $3)
WHERE
  status_id = $1 AND deleted = false RETURNING status_id, status, updated_at
`

type UpdateSatusByIdParams struct {
	StatusID int64          `db:"status_id" json:"status_id"`
	Status   sql.NullString `db:"status" json:"status"`
	Rv       int32          `db:"rv" json:"rv"`
}

type UpdateSatusByIdRow struct {
	StatusID  int64          `db:"status_id" json:"status_id"`
	Status    sql.NullString `db:"status" json:"status"`
	UpdatedAt sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateSatusById(ctx context.Context, arg UpdateSatusByIdParams) (UpdateSatusByIdRow, error) {
	row := q.queryRow(ctx, q.updateSatusByIdStmt, updateSatusById, arg.StatusID, arg.Status, arg.Rv)
	var i UpdateSatusByIdRow
	err := row.Scan(&i.StatusID, &i.Status, &i.UpdatedAt)
	return i, err
}

const updateSatusByName = `-- name: UpdateSatusByName :one
UPDATE
  statuses 
SET 
  (status, updated_at, rv) = ($2, now(), $3)
WHERE
  status = $1 AND deleted = false RETURNING status_id, status, updated_at
`

type UpdateSatusByNameParams struct {
	Status   sql.NullString `db:"status" json:"status"`
	Status_2 sql.NullString `db:"status_2" json:"status_2"`
	Rv       int32          `db:"rv" json:"rv"`
}

type UpdateSatusByNameRow struct {
	StatusID  int64          `db:"status_id" json:"status_id"`
	Status    sql.NullString `db:"status" json:"status"`
	UpdatedAt sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateSatusByName(ctx context.Context, arg UpdateSatusByNameParams) (UpdateSatusByNameRow, error) {
	row := q.queryRow(ctx, q.updateSatusByNameStmt, updateSatusByName, arg.Status, arg.Status_2, arg.Rv)
	var i UpdateSatusByNameRow
	err := row.Scan(&i.StatusID, &i.Status, &i.UpdatedAt)
	return i, err
}

const updateTeamAppCompany = `-- name: UpdateTeamAppCompany :one
UPDATE
  teams_apps_companies
SET 
  (team_id, app_id, company_id, updated_at, rv) 
  = ($2, $3, $4, now(), $5)
WHERE
  team_app_company_id = $1 AND deleted = false RETURNING team_app_company_id, team_id, app_id, company_id, updated_at
`

type UpdateTeamAppCompanyParams struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
	Rv               sql.NullInt32 `db:"rv" json:"rv"`
}

type UpdateTeamAppCompanyRow struct {
	TeamAppCompanyID int64         `db:"team_app_company_id" json:"team_app_company_id"`
	TeamID           sql.NullInt64 `db:"team_id" json:"team_id"`
	AppID            sql.NullInt64 `db:"app_id" json:"app_id"`
	CompanyID        sql.NullInt64 `db:"company_id" json:"company_id"`
	UpdatedAt        sql.NullTime  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateTeamAppCompany(ctx context.Context, arg UpdateTeamAppCompanyParams) (UpdateTeamAppCompanyRow, error) {
	row := q.queryRow(ctx, q.updateTeamAppCompanyStmt, updateTeamAppCompany,
		arg.TeamAppCompanyID,
		arg.TeamID,
		arg.AppID,
		arg.CompanyID,
		arg.Rv,
	)
	var i UpdateTeamAppCompanyRow
	err := row.Scan(
		&i.TeamAppCompanyID,
		&i.TeamID,
		&i.AppID,
		&i.CompanyID,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTeamById = `-- name: UpdateTeamById :one
UPDATE
  teams
SET 
  (team, industry_id, updated_at, rv) = ($2, $3, now(), $4)
WHERE
  team_id = $1 AND deleted = false RETURNING team_id, team, industry_id, updated_at
`

type UpdateTeamByIdParams struct {
	TeamID     int64  `db:"team_id" json:"team_id"`
	Team       string `db:"team" json:"team"`
	IndustryID int64  `db:"industry_id" json:"industry_id"`
	Rv         int32  `db:"rv" json:"rv"`
}

type UpdateTeamByIdRow struct {
	TeamID     int64        `db:"team_id" json:"team_id"`
	Team       string       `db:"team" json:"team"`
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateTeamById(ctx context.Context, arg UpdateTeamByIdParams) (UpdateTeamByIdRow, error) {
	row := q.queryRow(ctx, q.updateTeamByIdStmt, updateTeamById,
		arg.TeamID,
		arg.Team,
		arg.IndustryID,
		arg.Rv,
	)
	var i UpdateTeamByIdRow
	err := row.Scan(
		&i.TeamID,
		&i.Team,
		&i.IndustryID,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTeamByName = `-- name: UpdateTeamByName :one
UPDATE
  teams
SET 
  (team, industry_id, updated_at, rv) = ($2, $3, now(), $4)
WHERE
  team = $1 AND deleted = false RETURNING team_id, team, industry_id, updated_at
`

type UpdateTeamByNameParams struct {
	Team       string `db:"team" json:"team"`
	Team_2     string `db:"team_2" json:"team_2"`
	IndustryID int64  `db:"industry_id" json:"industry_id"`
	Rv         int32  `db:"rv" json:"rv"`
}

type UpdateTeamByNameRow struct {
	TeamID     int64        `db:"team_id" json:"team_id"`
	Team       string       `db:"team" json:"team"`
	IndustryID int64        `db:"industry_id" json:"industry_id"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateTeamByName(ctx context.Context, arg UpdateTeamByNameParams) (UpdateTeamByNameRow, error) {
	row := q.queryRow(ctx, q.updateTeamByNameStmt, updateTeamByName,
		arg.Team,
		arg.Team_2,
		arg.IndustryID,
		arg.Rv,
	)
	var i UpdateTeamByNameRow
	err := row.Scan(
		&i.TeamID,
		&i.Team,
		&i.IndustryID,
		&i.UpdatedAt,
	)
	return i, err
}
