// Code generated by sqlc. DO NOT EDIT.
// source: user.create.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCreds = `-- name: CreateCreds :one
INSERT INTO 
  creds(hashed_pass, rv)
VALUES 
  ($1, $2) RETURNING cred_id, created_at
`

type CreateCredsParams struct {
	HashedPass string `db:"hashed_pass" json:"hashed_pass"`
	Rv         int32  `db:"rv" json:"rv"`
}

type CreateCredsRow struct {
	CredID    uuid.UUID `db:"cred_id" json:"cred_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateCreds(ctx context.Context, arg CreateCredsParams) (CreateCredsRow, error) {
	row := q.queryRow(ctx, q.createCredsStmt, createCreds, arg.HashedPass, arg.Rv)
	var i CreateCredsRow
	err := row.Scan(&i.CredID, &i.CreatedAt)
	return i, err
}

const createUserBasic = `-- name: CreateUserBasic :one
INSERT INTO 
  users(email, username, status_id, cred_id, user_info_id, rv)
VALUES 
  ($1, $2, $3, $4, $5, $6) RETURNING user_id, email, username, user_info_id, created_at
`

type CreateUserBasicParams struct {
	Email      string    `db:"email" json:"email"`
	Username   string    `db:"username" json:"username"`
	StatusID   int64     `db:"status_id" json:"status_id"`
	CredID     uuid.UUID `db:"cred_id" json:"cred_id"`
	UserInfoID uuid.UUID `db:"user_info_id" json:"user_info_id"`
	Rv         int32     `db:"rv" json:"rv"`
}

type CreateUserBasicRow struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	Email      string    `db:"email" json:"email"`
	Username   string    `db:"username" json:"username"`
	UserInfoID uuid.UUID `db:"user_info_id" json:"user_info_id"`
	CreatedAt  time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateUserBasic(ctx context.Context, arg CreateUserBasicParams) (CreateUserBasicRow, error) {
	row := q.queryRow(ctx, q.createUserBasicStmt, createUserBasic,
		arg.Email,
		arg.Username,
		arg.StatusID,
		arg.CredID,
		arg.UserInfoID,
		arg.Rv,
	)
	var i CreateUserBasicRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.Username,
		&i.UserInfoID,
		&i.CreatedAt,
	)
	return i, err
}

const createUserInfoBasic = `-- name: CreateUserInfoBasic :one
INSERT INTO 
  users_info(first_name, last_name, dob, rv)
VALUES 
  ($1, $2, $3, $4) RETURNING user_info_id, created_at
`

type CreateUserInfoBasicParams struct {
	FirstName sql.NullString `db:"first_name" json:"first_name"`
	LastName  sql.NullString `db:"last_name" json:"last_name"`
	Dob       time.Time      `db:"dob" json:"dob"`
	Rv        int32          `db:"rv" json:"rv"`
}

type CreateUserInfoBasicRow struct {
	UserInfoID uuid.UUID `db:"user_info_id" json:"user_info_id"`
	CreatedAt  time.Time `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateUserInfoBasic(ctx context.Context, arg CreateUserInfoBasicParams) (CreateUserInfoBasicRow, error) {
	row := q.queryRow(ctx, q.createUserInfoBasicStmt, createUserInfoBasic,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Rv,
	)
	var i CreateUserInfoBasicRow
	err := row.Scan(&i.UserInfoID, &i.CreatedAt)
	return i, err
}
