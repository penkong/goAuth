// Code generated by sqlc. DO NOT EDIT.

package pgdb

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAppBasicStmt, err = db.PrepareContext(ctx, createAppBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppBasic: %w", err)
	}
	if q.createBankAccountAllBasicStmt, err = db.PrepareContext(ctx, createBankAccountAllBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBankAccountAllBasic: %w", err)
	}
	if q.createBankAccountBasicStmt, err = db.PrepareContext(ctx, createBankAccountBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBankAccountBasic: %w", err)
	}
	if q.createBusinessLogsStmt, err = db.PrepareContext(ctx, createBusinessLogs); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBusinessLogs: %w", err)
	}
	if q.createCompanyBasicStmt, err = db.PrepareContext(ctx, createCompanyBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCompanyBasic: %w", err)
	}
	if q.createIndustryBasicStmt, err = db.PrepareContext(ctx, createIndustryBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIndustryBasic: %w", err)
	}
	if q.createPositionBasicStmt, err = db.PrepareContext(ctx, createPositionBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePositionBasic: %w", err)
	}
	if q.createRoleBasicStmt, err = db.PrepareContext(ctx, createRoleBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoleBasic: %w", err)
	}
	if q.createStatusBasicStmt, err = db.PrepareContext(ctx, createStatusBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStatusBasic: %w", err)
	}
	if q.createTeamBasicStmt, err = db.PrepareContext(ctx, createTeamBasic); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTeamBasic: %w", err)
	}
	if q.createTeamsAppsCompaniesStmt, err = db.PrepareContext(ctx, createTeamsAppsCompanies); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTeamsAppsCompanies: %w", err)
	}
	if q.deleteAppStmt, err = db.PrepareContext(ctx, deleteApp); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteApp: %w", err)
	}
	if q.deleteBankAccountStmt, err = db.PrepareContext(ctx, deleteBankAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBankAccount: %w", err)
	}
	if q.deleteBankAccountAllStmt, err = db.PrepareContext(ctx, deleteBankAccountAll); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBankAccountAll: %w", err)
	}
	if q.deleteCompanyStmt, err = db.PrepareContext(ctx, deleteCompany); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCompany: %w", err)
	}
	if q.deleteIndustryStmt, err = db.PrepareContext(ctx, deleteIndustry); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteIndustry: %w", err)
	}
	if q.deletePositionStmt, err = db.PrepareContext(ctx, deletePosition); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePosition: %w", err)
	}
	if q.deleteRoleStmt, err = db.PrepareContext(ctx, deleteRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRole: %w", err)
	}
	if q.deleteStatusStmt, err = db.PrepareContext(ctx, deleteStatus); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStatus: %w", err)
	}
	if q.deleteTeamStmt, err = db.PrepareContext(ctx, deleteTeam); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTeam: %w", err)
	}
	if q.deleteTeamsAppsCompaniesStmt, err = db.PrepareContext(ctx, deleteTeamsAppsCompanies); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTeamsAppsCompanies: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAppBasicStmt != nil {
		if cerr := q.createAppBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppBasicStmt: %w", cerr)
		}
	}
	if q.createBankAccountAllBasicStmt != nil {
		if cerr := q.createBankAccountAllBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBankAccountAllBasicStmt: %w", cerr)
		}
	}
	if q.createBankAccountBasicStmt != nil {
		if cerr := q.createBankAccountBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBankAccountBasicStmt: %w", cerr)
		}
	}
	if q.createBusinessLogsStmt != nil {
		if cerr := q.createBusinessLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBusinessLogsStmt: %w", cerr)
		}
	}
	if q.createCompanyBasicStmt != nil {
		if cerr := q.createCompanyBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCompanyBasicStmt: %w", cerr)
		}
	}
	if q.createIndustryBasicStmt != nil {
		if cerr := q.createIndustryBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIndustryBasicStmt: %w", cerr)
		}
	}
	if q.createPositionBasicStmt != nil {
		if cerr := q.createPositionBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPositionBasicStmt: %w", cerr)
		}
	}
	if q.createRoleBasicStmt != nil {
		if cerr := q.createRoleBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleBasicStmt: %w", cerr)
		}
	}
	if q.createStatusBasicStmt != nil {
		if cerr := q.createStatusBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStatusBasicStmt: %w", cerr)
		}
	}
	if q.createTeamBasicStmt != nil {
		if cerr := q.createTeamBasicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTeamBasicStmt: %w", cerr)
		}
	}
	if q.createTeamsAppsCompaniesStmt != nil {
		if cerr := q.createTeamsAppsCompaniesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTeamsAppsCompaniesStmt: %w", cerr)
		}
	}
	if q.deleteAppStmt != nil {
		if cerr := q.deleteAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppStmt: %w", cerr)
		}
	}
	if q.deleteBankAccountStmt != nil {
		if cerr := q.deleteBankAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBankAccountStmt: %w", cerr)
		}
	}
	if q.deleteBankAccountAllStmt != nil {
		if cerr := q.deleteBankAccountAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBankAccountAllStmt: %w", cerr)
		}
	}
	if q.deleteCompanyStmt != nil {
		if cerr := q.deleteCompanyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCompanyStmt: %w", cerr)
		}
	}
	if q.deleteIndustryStmt != nil {
		if cerr := q.deleteIndustryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteIndustryStmt: %w", cerr)
		}
	}
	if q.deletePositionStmt != nil {
		if cerr := q.deletePositionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePositionStmt: %w", cerr)
		}
	}
	if q.deleteRoleStmt != nil {
		if cerr := q.deleteRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoleStmt: %w", cerr)
		}
	}
	if q.deleteStatusStmt != nil {
		if cerr := q.deleteStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStatusStmt: %w", cerr)
		}
	}
	if q.deleteTeamStmt != nil {
		if cerr := q.deleteTeamStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTeamStmt: %w", cerr)
		}
	}
	if q.deleteTeamsAppsCompaniesStmt != nil {
		if cerr := q.deleteTeamsAppsCompaniesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTeamsAppsCompaniesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createAppBasicStmt            *sql.Stmt
	createBankAccountAllBasicStmt *sql.Stmt
	createBankAccountBasicStmt    *sql.Stmt
	createBusinessLogsStmt        *sql.Stmt
	createCompanyBasicStmt        *sql.Stmt
	createIndustryBasicStmt       *sql.Stmt
	createPositionBasicStmt       *sql.Stmt
	createRoleBasicStmt           *sql.Stmt
	createStatusBasicStmt         *sql.Stmt
	createTeamBasicStmt           *sql.Stmt
	createTeamsAppsCompaniesStmt  *sql.Stmt
	deleteAppStmt                 *sql.Stmt
	deleteBankAccountStmt         *sql.Stmt
	deleteBankAccountAllStmt      *sql.Stmt
	deleteCompanyStmt             *sql.Stmt
	deleteIndustryStmt            *sql.Stmt
	deletePositionStmt            *sql.Stmt
	deleteRoleStmt                *sql.Stmt
	deleteStatusStmt              *sql.Stmt
	deleteTeamStmt                *sql.Stmt
	deleteTeamsAppsCompaniesStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createAppBasicStmt:            q.createAppBasicStmt,
		createBankAccountAllBasicStmt: q.createBankAccountAllBasicStmt,
		createBankAccountBasicStmt:    q.createBankAccountBasicStmt,
		createBusinessLogsStmt:        q.createBusinessLogsStmt,
		createCompanyBasicStmt:        q.createCompanyBasicStmt,
		createIndustryBasicStmt:       q.createIndustryBasicStmt,
		createPositionBasicStmt:       q.createPositionBasicStmt,
		createRoleBasicStmt:           q.createRoleBasicStmt,
		createStatusBasicStmt:         q.createStatusBasicStmt,
		createTeamBasicStmt:           q.createTeamBasicStmt,
		createTeamsAppsCompaniesStmt:  q.createTeamsAppsCompaniesStmt,
		deleteAppStmt:                 q.deleteAppStmt,
		deleteBankAccountStmt:         q.deleteBankAccountStmt,
		deleteBankAccountAllStmt:      q.deleteBankAccountAllStmt,
		deleteCompanyStmt:             q.deleteCompanyStmt,
		deleteIndustryStmt:            q.deleteIndustryStmt,
		deletePositionStmt:            q.deletePositionStmt,
		deleteRoleStmt:                q.deleteRoleStmt,
		deleteStatusStmt:              q.deleteStatusStmt,
		deleteTeamStmt:                q.deleteTeamStmt,
		deleteTeamsAppsCompaniesStmt:  q.deleteTeamsAppsCompaniesStmt,
	}
}
