// Code generated by sqlc. DO NOT EDIT.
// source: user.read.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getBankAccountAllBasic = `-- name: GetBankAccountAllBasic :one
SELECT 
  account_1, created_at, updated_at
FROM
  bank_account_all
WHERE
  bank_account_all_id = $1 AND deleted = false
`

type GetBankAccountAllBasicRow struct {
	Account1  sql.NullInt64 `db:"account_1" json:"account_1"`
	CreatedAt time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime  `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetBankAccountAllBasic(ctx context.Context, bankAccountAllID uuid.UUID) (GetBankAccountAllBasicRow, error) {
	row := q.queryRow(ctx, q.getBankAccountAllBasicStmt, getBankAccountAllBasic, bankAccountAllID)
	var i GetBankAccountAllBasicRow
	err := row.Scan(&i.Account1, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getCred = `-- name: GetCred :one
SELECT 
  cred_id , hashed_pass, created_at, updated_at
FROM 
  creds
WHERE 
  cred_id = $1 AND deleted = false
`

type GetCredRow struct {
	CredID     uuid.UUID    `db:"cred_id" json:"cred_id"`
	HashedPass string       `db:"hashed_pass" json:"hashed_pass"`
	CreatedAt  time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetCred(ctx context.Context, credID uuid.UUID) (GetCredRow, error) {
	row := q.queryRow(ctx, q.getCredStmt, getCred, credID)
	var i GetCredRow
	err := row.Scan(
		&i.CredID,
		&i.HashedPass,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserBasic = `-- name: GetUserBasic :one
SELECT 
  email, username, cred_id, user_info_id, status_id, updated_at
FROM 
  users 
WHERE 
  (email = $1 OR username = $2) AND deleted = false
`

type GetUserBasicParams struct {
	Email    string `db:"email" json:"email"`
	Username string `db:"username" json:"username"`
}

type GetUserBasicRow struct {
	Email      string       `db:"email" json:"email"`
	Username   string       `db:"username" json:"username"`
	CredID     uuid.UUID    `db:"cred_id" json:"cred_id"`
	UserInfoID uuid.UUID    `db:"user_info_id" json:"user_info_id"`
	StatusID   int64        `db:"status_id" json:"status_id"`
	UpdatedAt  sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserBasic(ctx context.Context, arg GetUserBasicParams) (GetUserBasicRow, error) {
	row := q.queryRow(ctx, q.getUserBasicStmt, getUserBasic, arg.Email, arg.Username)
	var i GetUserBasicRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.CredID,
		&i.UserInfoID,
		&i.StatusID,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserInfoBasic = `-- name: GetUserInfoBasic :one
SELECT 
  user_info_id, first_name, last_name, dob, cell_phone, home_phone, work_phone, avatar, banner, bio, work_address, home_address, current_city, born_country, living_country, current_country, zip_code, national_number, national_card_pic, passport_number_type, passport_pic, created_at, updated_at, deleted_at, deleted, rv
FROM 
  users_info 
WHERE 
  user_info_id = $1 AND deleted = false
`

func (q *Queries) GetUserInfoBasic(ctx context.Context, userInfoID uuid.UUID) (UsersInfo, error) {
	row := q.queryRow(ctx, q.getUserInfoBasicStmt, getUserInfoBasic, userInfoID)
	var i UsersInfo
	err := row.Scan(
		&i.UserInfoID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.CellPhone,
		&i.HomePhone,
		&i.WorkPhone,
		&i.Avatar,
		&i.Banner,
		&i.Bio,
		&i.WorkAddress,
		&i.HomeAddress,
		&i.CurrentCity,
		&i.BornCountry,
		&i.LivingCountry,
		&i.CurrentCountry,
		&i.ZipCode,
		&i.NationalNumber,
		&i.NationalCardPic,
		&i.PassportNumberType,
		&i.PassportPic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Deleted,
		&i.Rv,
	)
	return i, err
}

const getUserRoleAppCompanyByUserAppId = `-- name: GetUserRoleAppCompanyByUserAppId :one
SELECT 
  user_id, role_id, app_id, company_id, created_at, updated_at
FROM
  users_roles_apps_companies
WHERE
  user_id = $1 AND app_id = $2 AND deleted = false
`

type GetUserRoleAppCompanyByUserAppIdParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	AppID  int64     `db:"app_id" json:"app_id"`
}

type GetUserRoleAppCompanyByUserAppIdRow struct {
	UserID    uuid.UUID    `db:"user_id" json:"user_id"`
	RoleID    int64        `db:"role_id" json:"role_id"`
	AppID     int64        `db:"app_id" json:"app_id"`
	CompanyID int64        `db:"company_id" json:"company_id"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserRoleAppCompanyByUserAppId(ctx context.Context, arg GetUserRoleAppCompanyByUserAppIdParams) (GetUserRoleAppCompanyByUserAppIdRow, error) {
	row := q.queryRow(ctx, q.getUserRoleAppCompanyByUserAppIdStmt, getUserRoleAppCompanyByUserAppId, arg.UserID, arg.AppID)
	var i GetUserRoleAppCompanyByUserAppIdRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.AppID,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRoleAppPositionTeamCompany = `-- name: GetUserRoleAppPositionTeamCompany :one
SELECT 
  user_id
FROM
  users_roles_apps_positions_teams_companies
WHERE
  user_id = $1 AND app_id = $2 AND deleted = false
`

type GetUserRoleAppPositionTeamCompanyParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	AppID  int64     `db:"app_id" json:"app_id"`
}

func (q *Queries) GetUserRoleAppPositionTeamCompany(ctx context.Context, arg GetUserRoleAppPositionTeamCompanyParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getUserRoleAppPositionTeamCompanyStmt, getUserRoleAppPositionTeamCompany, arg.UserID, arg.AppID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
