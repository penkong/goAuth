// Code generated by sqlc. DO NOT EDIT.
// source: base.delete.sql

package pgdb

import (
	"context"

	"github.com/google/uuid"
)

const deleteApp = `-- name: DeleteApp :exec
UPDATE
  apps 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  app_id = $1 AND deleted = false
`

func (q *Queries) DeleteApp(ctx context.Context, appID int64) error {
	_, err := q.exec(ctx, q.deleteAppStmt, deleteApp, appID)
	return err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
UPDATE
  bank_account
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  bank_account_id = $1 AND deleted = false
`

func (q *Queries) DeleteBankAccount(ctx context.Context, bankAccountID int64) error {
	_, err := q.exec(ctx, q.deleteBankAccountStmt, deleteBankAccount, bankAccountID)
	return err
}

const deleteBankAccountAll = `-- name: DeleteBankAccountAll :exec
UPDATE
  bank_account_all
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  bank_account_all_id = $1 AND deleted = false
`

func (q *Queries) DeleteBankAccountAll(ctx context.Context, bankAccountAllID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteBankAccountAllStmt, deleteBankAccountAll, bankAccountAllID)
	return err
}

const deleteCompany = `-- name: DeleteCompany :exec
UPDATE
  companies
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  company_id = $1 AND deleted = false
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID int32) error {
	_, err := q.exec(ctx, q.deleteCompanyStmt, deleteCompany, companyID)
	return err
}

const deleteIndustry = `-- name: DeleteIndustry :exec
UPDATE
  industries 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  industry_id = $1
`

func (q *Queries) DeleteIndustry(ctx context.Context, industryID int64) error {
	_, err := q.exec(ctx, q.deleteIndustryStmt, deleteIndustry, industryID)
	return err
}

const deletePosition = `-- name: DeletePosition :exec
UPDATE
  positions 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  position_id = $1 AND deleted = false
`

func (q *Queries) DeletePosition(ctx context.Context, positionID int64) error {
	_, err := q.exec(ctx, q.deletePositionStmt, deletePosition, positionID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
UPDATE
  roles 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int64) error {
	_, err := q.exec(ctx, q.deleteRoleStmt, deleteRole, roleID)
	return err
}

const deleteStatus = `-- name: DeleteStatus :exec
UPDATE
  industries 
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  industry_id = $1
`

func (q *Queries) DeleteStatus(ctx context.Context, industryID int64) error {
	_, err := q.exec(ctx, q.deleteStatusStmt, deleteStatus, industryID)
	return err
}

const deleteTeam = `-- name: DeleteTeam :exec
UPDATE
  teams
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  team_id = $1 AND deleted = false
`

func (q *Queries) DeleteTeam(ctx context.Context, teamID int64) error {
	_, err := q.exec(ctx, q.deleteTeamStmt, deleteTeam, teamID)
	return err
}

const deleteTeamsAppsCompanies = `-- name: DeleteTeamsAppsCompanies :exec
UPDATE
  teams_apps_companies
SET 
  (updated_at, deleted_at, deleted) = (now(), now(), true)
WHERE
  team_app_company_id = $1 AND deleted = false
`

func (q *Queries) DeleteTeamsAppsCompanies(ctx context.Context, teamAppCompanyID int64) error {
	_, err := q.exec(ctx, q.deleteTeamsAppsCompaniesStmt, deleteTeamsAppsCompanies, teamAppCompanyID)
	return err
}
